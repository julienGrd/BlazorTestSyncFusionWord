@page "/"
@inject HttpClient Http
@using Syncfusion.Blazor.DocumentEditor
@using System.Net;
@using System.IO;
@using Newtonsoft.Json;
<div class="d-flex flex-column">
    @*<Syncfusion.Blazor.Schedule.SfSchedule TValue="AppointmentData" Height="650px" SelectedDate="@(new DateTime(2020, 2, 14))">
        <Syncfusion.Blazor.Schedule.ScheduleEventSettings DataSource="@DataSource"></Syncfusion.Blazor.Schedule.ScheduleEventSettings>
    </Syncfusion.Blazor.Schedule.SfSchedule>*@
    <button @onclick="OnSave">Save</button>
    <div class="container-fluid flex-grow-1">
        <SfDocumentEditorContainer ServiceUrl="https://localhost:5201/api/word/" EnableSpellCheck="true" @ref="container" EnableToolbar=true Height="650px" Width="1180px" Locale="fr">
            <DocumentEditorContainerEvents Created="OnCreated"></DocumentEditorContainerEvents>
        </SfDocumentEditorContainer>
    </div>
</div>




@code{
    List<AppointmentData> DataSource = new List<AppointmentData>
    {
        new AppointmentData { Id = 1, Subject = "Paris", StartTime = new DateTime(2020, 2, 13, 10, 0, 0) , EndTime = new DateTime(2020, 2, 13, 12, 0, 0) },
        new AppointmentData { Id = 2, Subject = "Germany", StartTime = new DateTime(2020, 2, 15, 10, 0, 0) , EndTime = new DateTime(2020, 2, 15, 12, 0, 0) }
    };
    public class AppointmentData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
    }

    internal string DocumentName { get; set; }
    SfDocumentEditorContainer container;
    string sfdtString;

    //protected override async Task OnInitializedAsync()
    //{
    //    var byteArray = await Http.GetFromJsonAsync<byte[]>("Word");
    //    Stream stream = new MemoryStream(byteArray);
    //    Console.WriteLine("memory stream build");
    //    WordDocument document = WordDocument.Load(stream, ImportFormatType.Docx);
    //    Console.WriteLine("word loaded");

    //    sfdtString = JsonConvert.SerializeObject(document);
    //    Console.WriteLine("sfdtString is set");
    //    document.Dispose();
    //    stream.Dispose();
    //    await base.OnInitializedAsync();
    //}

    protected override void OnInitialized()
    {
        //string fileUrl = "https://www.syncfusion.com/downloads/support/directtrac/general/doc/Getting_Started1018066633.docx";
        //WebClient webClient = new WebClient();
        //byte[] byteArray = webClient.DownloadData(fileUrl);
        //Console.WriteLine("getting byteArray");
        //Stream stream = new MemoryStream(byteArray);
        //Console.WriteLine("memory stream build");
        //WordDocument document = WordDocument.Load(stream, ImportFormatType.Docx);
        //Console.WriteLine("word loaded");
        //var sfdtString = JsonConvert.SerializeObject(document);
        //document.Dispose();
        //stream.Dispose();
        //sfdtString = await Http.GetStringAsync("Word");
        base.OnInitialized();
    }

    //public void OnLoad(object args)
    //{
    //    DocumentEditorModule editor = container.GetDocumentEditor();
    //    Console.WriteLine("word onload,sfdtString need to be set");
    //    editor.Open(sfdtString);
    //    StateHasChanged();
    //}
    public async Task OnCreated(object args)
    {
        var spellcheck = container.GetDocumentEditor().GetSpellChecker();
        // Document Editor provides multi-language spell check support. You can add as many languages (dictionaries) in the server-side and to use that language for spell checking in Document Editor, it must be matched with languageID you pass in the Document Editor.   
        spellcheck.SetLanguageID(1046);
        spellcheck.SetRemoveUnderline(false);
        spellcheck.SetAllowSpellCheckAndSuggestion(true);
        await Load();
    }

    private async Task OnSave()
    {
        DocumentEditorModule editor = container.GetDocumentEditor();
        string base64Data = await editor.SaveAsBlob(FormatType.Docx);
        //Dictionary<string, string> documentContent = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string, string>>(base64Data.ToString());
        byte[] data = Convert.FromBase64String(base64Data);

        await Http.PostAsJsonAsync<byte[]>("api/word/save", data);
    }

    private async Task Load()
    {
        var byteArray = await Http.GetFromJsonAsync<byte[]>("api/word");
        Stream stream = new MemoryStream(byteArray);
        Console.WriteLine("memory stream build");
        WordDocument document = WordDocument.Load(stream, ImportFormatType.Docx);
        Console.WriteLine("word loaded");

        sfdtString = JsonConvert.SerializeObject(document);
        Console.WriteLine("sfdtString is set");
        document.Dispose();
        stream.Dispose();
        DocumentEditorModule editor = container.GetDocumentEditor();
        Console.WriteLine("word onload,sfdtString need to be set");
        await editor.Open(sfdtString);
        //StateHasChanged();
    }
}
